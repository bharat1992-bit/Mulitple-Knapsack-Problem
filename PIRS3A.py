
import math 
import random
import numpy as np
from operator import itemgetter 
ALPHA = 0.6
beta = 0.5
M = 40
e = .001
#e=.001
T0 = []
C = []
S= []
B=[]
#weight_cost= [(631, 845), (846, 758), (244, 421), (732, 259), (118, 512), (221, 405), (795, 784), (333, 304), (816, 477), (101, 584), (147, 909), (698, 505), (46, 282), (574, 756), (911, 619), (535, 251), (681, 910), (27, 983), (635, 811), (607, 903), (576, 311), (392, 730), (371, 899), (981, 684), (37, 473), (22, 101), (962, 435), (185, 611), (124, 914), (211, 967), (801, 478), (937, 866), (23, 261), (426, 806), (102, 549), (260, 15), (221, 720), (647, 399), (351, 825), (181, 669), (504, 2), (40, 494), (101, 868), (989, 244), (200, 326), (359, 871), (732, 192), (839, 568), (919, 239), (170, 968), (673, 804), (967, 448), (59, 81), (677, 321), (846, 508), (343, 933), (251, 110), (597, 552), (443, 707), (175, 548), (472, 815), (410, 541), (570, 964), (509, 604), (312, 588), (358, 445), (838, 597), (251, 385), (561, 576), (13, 291), (742, 190), (336, 187), (46, 613), (281, 657), (241, 477), (954, 90), (353, 758), (288, 877), (360, 924), (947, 843), (634, 899), (622, 924), (716, 541), (389, 392), (415, 706), (651, 276), (2, 812), (193, 850), (335, 896), (240, 590), (638, 950), (379, 580), (876, 451), (569, 661), (415, 997), (403, 917), (702, 794), (419, 83), (663, 613), (47, 487)]
#weight_cost = [(57, 135), (871, 848), (570, 764), (200, 256), (505, 496), (485, 450), (357, 652), (347, 789), (539, 94), (624, 29), (613, 836), (459, 433), (28, 763), (230, 3), (178, 446), (585, 722), (862, 229), (799, 946), (798, 902), (817, 31), (256, 26), (842, 542), (674, 940), (84, 382), (17, 217), (15, 423), (756, 30), (250, 222), (110, 438), (625, 496), (345, 234), (70, 231), (160, 219), (528, 460), (169, 290), (273, 22), (712, 838), (455, 557), (323, 643), (474, 186), (24, 993), (387, 860), (421, 121), (189, 333), (109, 722), (900, 712), (511, 937), (210, 423), (606, 831), (818, 671), (21, 304), (18, 588), (147, 883), (719, 847), (161, 506), (705, 590), (679, 35), (545, 243), (221, 798), (976, 415), (798, 174), (517, 549), (224, 704), (649, 675), (395, 375), (576, 439), (322, 509), (631, 779), (59, 521), (299, 394), (968, 490), (876, 30), (307, 44), (859, 704), (311, 984), (940, 594), (744, 394), (417, 171), (253, 503), (9, 983), (879, 771), (38, 540), (820, 861), (963, 233), (571, 514), (172, 953), (868, 578), (974, 460), (705, 270), (509, 548), (378, 958), (347, 6), (206, 784), (675, 821), (433, 887), (195, 741), (105, 810), (666, 519), (297, 562), (500, 427)]
#weight_cost = [(32, 957), (363, 948), (172, 57), (673, 85), (83, 836), (955, 736), (26, 670), (730, 309), (22, 606), (256, 607), (814, 582), (158, 159), (184, 431), (692, 394), (386, 724), (44, 995), (991, 950), (152, 545), (37, 445), (345, 269), (616, 36), (743, 28), (114, 465), (338, 319), (31, 381), (449, 892), (766, 526), (740, 561), (903, 237), (756, 24), (863, 326), (706, 137), (473, 511), (226, 999), (661, 675), (317, 182), (103, 894), (448, 797), (875, 735), (128, 907), (585, 763), (393, 790), (515, 354), (144, 981), (960, 962), (260, 162), (607, 755), (420, 716), (19, 462), (558, 531), (141, 491), (57, 925), (34, 501), (162, 832), (96, 354), (636, 883), (509, 900), (984, 462), (935, 568), (995, 921), (233, 724), (445, 487), (251, 222), (592, 325), (625, 700), (801, 167), (710, 908), (257, 269), (424, 912), (527, 310), (5, 958), (36, 707), (409, 505), (112, 518), (724, 652), (241, 588), (100, 312), (182, 208), (232, 512), (218, 935), (521, 624), (465, 76), (310, 821), (642, 726), (213, 908), (907, 192), (964, 745), (729, 59), (434, 653), (512, 274), (582, 227), (52, 876), (419, 107), (526, 523), (182, 854), (94, 245), (803, 211), (367, 881), (520, 423), (922, 717)]
#weight_cost = [(644, 238), (596, 545), (560, 370), (621, 604), (941, 626), (508, 66), (432, 14), (721, 838), (238, 260), (302, 235), (978, 996), (522, 471), (549, 837), (12, 477), (416, 640), (580, 151), (21, 635), (616, 869), (633, 524), (61, 742), (628, 672), (467, 65), (680, 759), (353, 592), (707, 302), (739, 32), (23, 866), (61, 473), (677, 719), (964, 879), (252, 715), (457, 922), (593, 395), (321, 801), (364, 445), (313, 936), (370, 879), (596, 98), (301, 136), (378, 217), (773, 966), (27, 437), (570, 627), (736, 302), (311, 508), (223, 386), (804, 351), (239, 586), (188, 585), (436, 905), (699, 682), (102, 929), (322, 857), (334, 991), (834, 672), (439, 164), (856, 861), (170, 965), (337, 905), (651, 570), (885, 714), (452, 212), (226, 832), (121, 574), (530, 285), (191, 64), (807, 854), (839, 990), (184, 89), (279, 801), (808, 411), (642, 151), (807, 294), (346, 769), (130, 873), (292, 45), (794, 615), (272, 45), (347, 719), (417, 331), (420, 881), (410, 981), (921, 506), (156, 999), (5, 310), (944, 77), (880, 600), (987, 32), (435, 198), (951, 408), (928, 611), (223, 157), (746, 43), (837, 868), (663, 314), (520, 959), (290, 897), (342, 378), (228, 461), (69, 521)]
#weight_cost = [(14,223),(38,230),(3,54),(1,214),(13,118),(4,147),(15,16),(2,104),(5,56),(49,154),(40,106),(24,234),(18,34),(33,195),(7,74),(10,129),(12,159),(42,37),(41,10),(11,185),(6,243),(45,87),(32,57),(20,87),(9,26),(16,201),(39,0),(23,128),(39,194),(21,10),(46,1),(8,28),(30,59),(26,130),(35,160),(22,91),(34,180),(19,16),(31,1),(17, 72)]
#weight_cost =  [(1,98),(10,120),(2,232),(19,45),(29,183),(4,229),(35,153),(8,13),(49,72),(3,172),(17,21),(9,145),(11,57),(12,44),(44,124),(14,150),(30,208),(6,62),(24,159),(23,26),(25,210),(13,170),(48,76),(47,151),(22,164),(16,72),(26,12),(18,191),(33,231),(5,22),(43,81),(7,54),(28,149),(38,189),(46,7),(31,104),(45,136),(27,77),(41,64),(40,34)]
#weight_cost = [(2,31),(8,207),(1,183),(16,13),(3,37),(46,5),(22,177),(6,85),(31,55),(26,11),(17,198),(15,222),(5,123),(4,146),(11,183),(41,33),(39,83),(13,61),(10,231),(23,10),(18,195),(37,78),(29,248),(25,198),(7,29),(9,186),(34,95),(48,197),(36,66),(44,112),(20,188),(38,91),(28,178),(12,62),(19,166),(40,87),(24,206),(14,109),(43,82),(35,159)]
#weight_cost = [(7,209),(3,159),(1,231),(5,220),(4,76),(2,108),(11,111),(9,208),(6,32),(21,244),(47,159),(48,35),(8,90),(42,29),(36,42),(37,100),(26,56),(13,98),(28,77),(10,98),(15,36),(25,199),(17,81),(18,206),(38,253),(27,254),(12,87),(44,15),(35,125),(16,253),(19,4),(34,95),(24,96),(30,42),(29,147),(45,13),(20,242),(40,172),(41,96),(49,137)]
#weight_cost = [(5, 2.769), (5, 1.191), (5, 0.935), (5, 1.527), (5, 0.621), (5, 1.836), (5, 0.839), (5, 0.839), (5, 1.527), (5, 1.191), (5, 0.935), (5, 1.98), (5, 4.395), (5, 1.98), (5, 0.839), (5, 1.98), (5, 0.839), (5, 0.839), (5, 0.935), (5, 0.621), (5, 0.839), (5, 0.935), (5, 0.165), (5, 0.935), (5, 0.935), (5, 1.191), (5, 2.385), (5, 0.437), (5, 0.935), (5, 4.395), (5, 0.839), (5, 0.935), (5, 1.527), (5, 2.385), (5, 1.527), (5, 0.839), (5, 0.839), (5, 0.839), (5, 0.621), (5, 1.98)]
#weight_cost = [ (5, 0.839), (5, 0.437), (5, 0.935), (5, 0.269), (5, 0.935), (5, 0.839), (5, 0.437), (5, 0.621)]
#weight_cost = [(4,67),(31,236),(1,211),(32,191),(7,97),(2,223),(3,237),(8,174),(17,53),(43,152),(6,237),(19,143),(46,202),(11,20),(12,148),(5,80),(10,63),(18,141),(41,82),(16,29),(14,68),(20,44),(9,32),(49,253),(24,152),(34,12),(15,184),(26,148),(28,77),(39,99),(30,132),(37,186),(13,76),(42,74),(47,13),(36,70),(21,29),(23,17),(38,210),(29,235)]
#weight_cost = [(17,224),(1,62),(2,21),(7,76),(31,147),(8,106),(6,17),(3,134),(4,122),(27,192),(14,208),(5,104),(9,209),(23,36),(29,255),(21,69),(15,248),(20,104),(34,10),(12,126),(46,181),(41,243),(35,4),(18,172),(10,139),(11,166),(26,190),(24,241),(43,107),(22,129),(42,61),(28,115),(48,72),(32,212),(39,218),(47,232),(33,44),(49,236),(16,255),(30,137)]
#weight_cost = [(1,142),(39,45),(40,107),(20,152),(41,73),(14,185),(10,181),(8,159),(3,77),(5,210),(44,141),(47,153),(2,153),(48,12),(7,248),(4,248),(6,106),(17,96),(18,140),(12,131),(23,34),(35,196),(22,152),(11,252),(13,103),(37,241),(21,243),(24,133),(43,238),(32,214),(34,185),(16,46),(9,143),(28,245),(15,171),(29,79),(46,29),(49,82),(26,95),(19,241)]
#weight_cost = [ (1,208),(16,137),(11,175),(24,103),(2,75),(47,173),(7,113),(21,152),(31,27),(40,104),(6,141),(48,152),(3,112),(27,52),(12,231),(26,200),(34,226),(33,210),(9,65),(15,236),(25,242),(30,86),(13,34),(14,210),(10,71),(49,192),(5,177),(20,201),(18,205),(4,45),(32,13),(38,23),(28,194),(8,19),(44,48),(17,185),(22,215),(37,172),(42,33),(39,209)]
#weight_cost = [(4,46),(2,103),(26,160),(16,23),(36,128),(46,70),(1,242),(43,67),(31,65),(28,4),(17,157),(5,2),(7,104),(9,235),(19,226),(15,79),(3,62),(21,41),(39,132),(40,105),(20,114),(6,249),(8,210),(37,45),(33,55),(25,49),(10,85),(23,62),(34,54),(48,58),(22,113),(11,9),(44,80),(14,160),(29,120),(12,0),(30,156),(13,125),(42,59),(45,152)]
#weight_cost = [(1,36),(12,198),(40,63),(34,95),(21,234),(10,226),(2,130),(39,68),(3,159),(7,145),(5,212),(4,107),(6,84),(30,81),(16,30),(28,76),(17,38),(49,253),(27,249),(25,49),(32,40),(19,125),(31,212),(38,59),(18,38),(14,190),(24,49),(41,146),(13,180),(47,51),(11,191),(9,160),(8,66),(33,216),(20,65),(15,84),(45,177),(46,226),(26,154),(29,92)]
#weight_cost = [(36,211),(17,8),(13,206),(2,183),(1,87),(4,3),(6,182),(7,122),(5,68),(10,139),(33,112),(8,4),(3,174),(26,125),(22,67),(18,125),(21,48),(9,154),(46,227),(27,132),(42,244),(11,171),(23,198),(31,166),(15,43),(35,44),(24,198),(12,91),(16,5),(20,42),(25,161),(29,190),(40,183),(32,170),(37,218),(45,249),(34,162),(30,185),(44,163),(38,244)]
#weight_cost = [(1,6),(6,108),(3,97),(8,99),(11,60),(2,167),(35,128),(26,189),(7,220),(24,99),(5,226),(44,119),(29,151),(16,27),(19,87),(36,39),(4,92),(47,6),(21,100),(27,87),(30,56),(9,160),(17,27),(14,177),(13,250),(12,153),(15,98),(23,208),(39,165),(45,120),(34,22),(37,5),(40,201),(22,127),(28,237),(41,117),(10,120),(43,235),(20,172),(32,76)]
#weight_cost =[(1,98),(10,120),(2,232),(19,45),(29,183),(4,229),(35,153),(8,13),(49,72),(3,172),(17,21),(9,145),(11,57),(12,44),(44,124),(14,150),(30,208),(6,62),(24,159),(23,26),(25,210),(13,170),(48,76),(47,151),(22,164),(16,72),(26,12),(18,191),(33,231),(5,22),(43,81),(7,54),(28,149),(38,189),(46,7),(31,104),(45,136),(27,77),(41,64),(40,34)]
#weight_cost = [(27,254),(5,108),(13,10),(11,171),(3,152),(4,42),(23,120),(7,246),(1,1),(2,134),(12,78),(29,191),(43,0),(46,203),(14,95),(8,24),(34,191),(32,113),(10,94),(33,153),(18,174),(19,237),(28,130),(17,181),(6,165),(45,246),(25,27),(39,168),(43,228),(9,49),(41,107),(49,95),(30,188),(21,65),(40,159),(48,153),(15,1),(36,68),(22,252),(26,219)]
#weight_cost = [(4, 4.107), (2, 3.182), (4, 9.422), (4, 7.708), (2, 4.107), (4, 1.764), (2, 1.287), (2, 1.764), (2, 1.98), (4, 1.287),  (2, 5.861), (2, 1.764), (2, 2.481), (2, 1.98), (4, 1.764), (2, 9.422), (4, 1.98), (4, 1.764), (4, 9.422), (2, 4.107), (2, 4.107), (4, 1.287), (4, 4.107), (2, 6.882), (2, 7.708), (4, 9.422), (4, 1.98), (4, 9.422), (4, 9.422), (4, 4.904), (2, 7.708), (2, 4.904), (4, 1.287), (2, 9.422), (4, 1.287), (2, 1.287), (2, 9.422), (4, 1.287), (2, 3.182), (4, 1.287), (2, 9.422), (2, 0.903), (2, 4.904), (2, 9.422), (4, 1.287), (4, 1.287), (2, 1.98), (4, 6.882), (4, 9.422), (2, 1.98), (2, 5.861), (2, 9.422), (4, 4.904), (4, 9.422), (2, 6.882), (4, 1.287), (2, 4.107), (2, 4.904), (4, 1.98), (4, 1.287), (4, 9.422), (4, 1.98), (4, 4.904), (2, 9.422), (4, 9.422), (4, 1.98), (2, 2.481), (4, 9.422), (2, 4.904), (4, 9.422), (2, 3.182), (2, 1.764), (2, 1.287), (4, 2.481), (2, 9.422), (4, 3.182), (2, 3.822), (2, 9.422), (4, 7.708), (4, 9.422), (4, 3.822), (4, 4.107)]
weight_cost = [(845,945),(758,858),(421,521),(259,359),(512,612),(405,505),(784,884),(304,404),(477,577),(584,684),(909,1009),(505,605),(282,382),(756,856),(619,719),(251,351),(910,1010),(983,1083),(811,911),(903,1003),(311,411),(730,830),(899,999),(684,784),(473,573),(101,201),(435,535),(611,711),(914,1014),(967,1067),(478,578),(866,966),(261,361),(806,906),(549,649),(15,115),(720,820),(399,499),(825,925),(669,769),(2,102),(494,594),(868,968),(244,344),(326,426),(871,971),(192,292),(568,668),(239,339),(968,1068)]
def annealing_algorithm(number, capacity, weight_cost, init_temp = (max(weight_cost,key= itemgetter(1))[1] - min(weight_cost, key = itemgetter(1))[1])*beta ,steps = M):
    start_sol = init_solution (weight_cost,capacity)
    best_cost,solution = simulate(start_sol, weight_cost, capacity, init_temp, steps)
    best_combination = [0]*number
    for idx in solution:
        best_combination[idx] = 1
    return best_cost, best_combination
    

def init_solution(weight_cost,max_weight):
    """ Used for initial solution generation.
    By adding a random item while weight is less max_weight
    """
    solution = [] #empty list
    allowed_positions = list(range (len(weight_cost))) # (0,10)
    while len(allowed_positions)>0:
        idx = random.randint(0,len(allowed_positions)-1) # any random number between 0 to 9
        selected_position = allowed_positions.pop(idx)
        if get_cost_and_weight_of_knapsack(solution + [selected_position],weight_cost)[1] <= max_weight:
            solution.append(selected_position)
        else:
            break
    return solution

def get_cost_and_weight_of_knapsack(solution,weight_cost):
    """ Get cost and weight of knapsack - fitness function
    """
    cost,weight = 0,0 
    for item in solution:
        weight += weight_cost[item][0]
        cost += weight_cost[item][1]
    return cost,weight

def moveto (solution, weight_cost, max_weight):
    """All possible moves are genrated"""
    
    moves =[]
    for idx, _ in enumerate (weight_cost): # idx will have index of weight_cost and _ will have exact values
        if idx not in solution:
            move = solution[:]
            move.append(idx)
            
            if get_cost_and_weight_of_knapsack(move,weight_cost)[1] <= max_weight:
                moves.append(move)
    
    for idx, _ in enumerate (solution):
        move = solution [:]
        del move [idx]
        if move not in moves:
            moves.append(move)
        return moves
            

def simulate (solution, weight_cost,max_weight,init_temp,steps):
    temperature = init_temp 
    
    best = solution
    best_cost = get_cost_and_weight_of_knapsack(solution,weight_cost)[0]
    
    current_sol = solution 
    
    while True:
        current_cost = get_cost_and_weight_of_knapsack(best,weight_cost)[0]
        #for i in range (30):
        for i in range (steps):
                 moves = moveto(current_sol,weight_cost,max_weight)
                 idx = random.randint(0,len(moves)-1)
                 random_move = moves[idx]
                 delta = get_cost_and_weight_of_knapsack(random_move,weight_cost)[0] - best_cost
                 if delta > 0:
                     best = random_move
                     best_cost = get_cost_and_weight_of_knapsack(best,weight_cost)[0]
                     current_sol = random_move
                 else:
                      if math.exp(delta/float(temperature)) > random.random():
                            current_sol = random_move
                      #temperature = (600)/(math.log(2+i))
                      #T0.append(temperature)
        
        C.append(current_cost) 
        B.append(best)
        #S.append(steps)
        #steps*=1.1
       # T0.append(temperature)
        temperature *= ALPHA
        if temperature <= e:
            
            break
    return best_cost, best
        
        

